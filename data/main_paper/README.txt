
This folder provides an all-encompassing working structure for empirical papers. It organizes every step of the process: merging and cleaning (several) data sets, performing analyses (tables, figures, regressions), writing the article itself and also presentations.

This file explains in more detail the folder structure and how you can take the most advantage of it. For more information, see Gentzknow & Shapiro (2014) Code and Data for the Social Sciences.

Enjoy. =)

Author: Ricardo Dahis
Contact: rdahis@u.northwestern.edu

Last Update: 02/07/2016




//-----------------------------------//
// Summary
0. Requirements
1. Folders
2. Files
3. Principles
//-----------------------------------//




0. Requirements

This workflow requires:
	Python 2 [Free] (www.python.org)
	Bash [Free] (www.gnu.org/software/bash/)
	Stata [Licensed] (www.stata.com)
	LaTeX [Free] (www.latex-project.org)

Other great languages and softwares may also be used.
	R [Free] (www.r-project.org)
	Matlab [Licensed] (www.mathworks.com/products/matlab)
	Python [Free] (www.python.org)

For now it's only adapted for OSX (Apple) environments.
Feel free to adapt it to Windows (and please share it with me!).




1. Folders

/build
	Contains the building process of the data set used in the /analysis.

	/input
	Any original data source should be included here in clean and normalized form.
	Only include cleaned files. Raw external files should be cleaned in each data source specific folder.
	These data sets will then be manipulated and merged by the files in /code.
	
	/code
	Any code that manipulates build data should be put here.
	The final product should be (ideally) a single data file saved into /output.
	Keep code clean and modularized.
	
	/output
	Holds the final data set, to be then used in /analysis.
	Forcing separation between /build/output and /analysis/input to ensure consistency.

	/tmp
	Contains any temporary file created during the manipulation of input data sets.

/analysis
	Where the analysis is carried out (tables, figures, regressions).

	/input
	Same principle. Should contain only the data set ready for analysis.

	/code
	Contains code performing the relevant analysis.
	All output should be redirected into /output.

	/output
	Contains all analysis objects generated by files in /code.
	Will then serve as source for the generation of .tex files.

	/tmp
	Contains any temporary file created during the analysis routine.

/extra
	Contains any extra file relevant to the paper.
	Examples: grant material, previous analyses.

/ref
	Keeps the paper references.
	Suggestion of formatting
		Author 1 & Author 2 (Journal, Year) Title with Capitalized First Letters.pdf
	Recommended auxiliary program: Mendeley.

/tex
	Where the juice is produced.
	Contains all .tex files for preliminary results, the paper and presentations.

	/sub
	Curated set of packages and shortcuts commonly used in Social Science papers and presentations.





2. Files

run_paper.py
	Automates the whole paper construction.
	Runs everything, from beginning (building data sets) to end (compiling .tex files).

/build/code/get_input.py
	Erases any file inside /build/input and copies any original data set from outside sources.
	Ensures consistency across original data generation and data building for paper.

/build/code/run_directory.py
	Runs all build files in a pre-specified order.
	Keeps clear what should be run when.
	Also cleans /output and /tmp folders before running other code.

/analysis/code/get_input.py
	Erases any file inside /analysis/input and copies the folder /build/output.
	Ensures consistency across processes.

/analysis/code/run_directory.py
	Same idea.





3. Principles

Use a good text editor (I recommend vim, Sublime Text or Notepad ++).
Keep papers in a /Papers folder.
Keep a separate /Data folder for original data sets.
	Use the same structure for generating these datasets (/input, /code, /output, /tmp)
	Then use /main/paper/build/code/get_input.py to copy original datasets.
Use version control systems (e.g. Git).
	Keep track of multiple authors' edits.
	No more report_final_v3.2b_ST_toDelete.tex.
	Use branching to work simultaneously on the same code.
Use a task manager (see Asana, Trello, JIRA, Evernote + GTD, etc).
	Your inbox is not a task manager.
Keep documentation lean and clean.
Keep this folder organized. Your future self thanks your present effort.


